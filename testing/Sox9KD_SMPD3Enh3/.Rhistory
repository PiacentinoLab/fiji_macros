gene_blast <- c("TTTAGAGGACATCTTTAGAGAAGGC", "AATAATGCAGGCTATCAGAGACCTC",
"TGCCCGGAGCCGGTGATTCCTACCA", "AAGGCAATATCCGGATGACTCTGGA",
"TGAGCGATACTCCCCATGGGGCGGA", "TTGCGACCGGGACAGCGGACACGCT",
"GCAAGCCCTCCTCCGCTCCAGAGTT", "GCCTCCCTCCGCATCCCTCTGCAGG",
"TACTCGTGCTGGTGAGCCGGACACC", "TTGAGAGACCATTTTGAGGATGCTT")
gene_blast <- c("GAGACCGCAAAACTTGAAGACCATA", "GAGGGTCAAAACAATGACACTGCTA")
### The following code creates the function to obtain the reverse complement of a given sequence
### Author Fabio Marroni (http://www.fabiomarroni.altervista.org/)
###### Arguments:
###### x:character vector, the DNA sequence.
###### rev: logical. If TRUE, the function will return the reverse complemente, if FALSE, it will return the complementary sequence. ###### The default value is TRUE.
###### Value: The complemented (and eventually reverse) sequence, as a character vector.
rev.comp<-function(x,rev=TRUE)
{
x<-toupper(x)
y<-rep("N",nchar(x))
xx<-unlist(strsplit(x,NULL))
for (bbb in 1:nchar(x))
{
if(xx[bbb]=="A") y[bbb]<-"T"
if(xx[bbb]=="C") y[bbb]<-"G"
if(xx[bbb]=="G") y[bbb]<-"C"
if(xx[bbb]=="T") y[bbb]<-"A"
}
if(rev==FALSE)
{
for(ccc in (1:nchar(x)))
{
if(ccc==1) yy<-y[ccc] else yy<-paste(yy,y[ccc],sep="")
}
}
if(rev==T)
{
zz<-rep(NA,nchar(x))
for(ccc in (1:nchar(x)))
{
zz[ccc]<-y[nchar(x)+1-ccc]
if(ccc==1) yy<-zz[ccc] else yy<-paste(yy,zz[ccc],sep="")
}
}
return(yy)
}
gene_probes <-""
for(i in 1:length(gene_blast)){
gene_probes[i] <- rev.comp(gene_blast[i])
}
gene_probes
write.table(gene_probes, "geneProbesFINAL.txt", quote = FALSE, sep = "\t", row.names = FALSE)
initiator_I1_a <- "gAggAgggCAgCAAACgg"
initiator_I1_b <- "gAAgAgTCTTCCTTTACg"
B1_spacera <- "AA"
B1_spacerb <- "TA"
initiator_sequence_odd = paste(initiator_I1_a, B1_spacera, sep ="")
initiator_sequence_even = paste(B1_spacerb, initiator_I1_b, sep ="")
gene_HCRProbes_B1 <- vector(mode="character", length=0)
for (i in 1:length(gene_probes)){
#If the number is odd... paste initiator sequence, spacer, then probe
if((i %% 2) != 0){
thingy <- paste0(casefold(initiator_sequence_odd, upper = FALSE), gene_probes[i])
print(thingy)
gene_HCRProbes_B1 <- append(gene_HCRProbes_B1, thingy)}
#If number is odd... paste probe sequence, spacer and initator
else{
thingy <- paste0(gene_probes[i], casefold(initiator_sequence_even, upper = FALSE))
print(thingy)
gene_HCRProbes_B1 <- append(gene_HCRProbes_B1, thingy)
}
}
write.table(gene_HCRProbes_B1, "gene_HCRProbes_B1.txt", quote = FALSE, sep = "\t", row.names = FALSE)
#RNAseq analysis using DESEQ2
require(DESeq2)
install.packages('DESeq2')
library(DESeq2)
condition<-factor(c('control','control','control','smpd3mo','smpd3mo'))
control_rep2<-read.table('Ctrl_rep2_counts.txt', header = F, row.names = 1)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
library(datasets)
library(ggplot2)
library(multcomp)
library(nlme)
library(XLConnect)
library(XLConnectJars)
library(lme4)
library(rJava)
library(xlsx)
library(readxl)
getwd()
#setwd("/Users/ivanferreira/Downloads/")
#dev.copy2pdf(file="GO_terms_allabove_3_refined.pdf")
aq_trim1 <- read.csv('BubblePlot_GOSlimBP_tidy.csv')
aq_trim1 <- aq_trim1[which(aq_trim1$GeneSet == "Downregulated" |
aq_trim1$GeneSet == "Upregulated"), ]
head(aq_trim1)
aq_trim1$GeneSet <- factor(aq_trim1$GeneSet, labels = c("Downregulated", "Upregulated"))
setEPS()
postscript("Red_plot.png")
p7 <- ggplot(aq_trim1, aes(x = GeneSet, y = reorder(GOSlimBP,FoldEnrichment),
size = FoldEnrichment, fill = pvalue)) +
geom_point(shape = 21) +
theme_bw() +
theme()
p7 <-  p7 + scale_fill_continuous(low = "red", high = "yellow")
p7 <- p7 +
#ggtitle("Lipid metabolic gene enrichment") +
labs(x = "GeneSet", y = "Biological Process") +
scale_size(range = c(1, 10)) +
theme(legend.position="right", legend.direction="vertical",
legend.box = "vertical",
legend.key.size = unit(0.3, "cm"))
p7
dev.off()
library(datasets)
library(ggplot2)
library(multcomp)
library(nlme)
library(XLConnect)
library(XLConnectJars)
library(lme4)
library(rJava)
library(xlsx)
library(readxl)
getwd()
#setwd("/Users/ivanferreira/Downloads/")
#dev.copy2pdf(file="GO_terms_allabove_3_refined.pdf")
aq_trim1 <- read.csv('BubblePlot_GOSlimBP_tidy.csv')
aq_trim1 <- aq_trim1[which(aq_trim1$GeneSet == "Downregulated" |
aq_trim1$GeneSet == "Upregulated"), ]
head(aq_trim1)
aq_trim1$GeneSet <- factor(aq_trim1$GeneSet, labels = c("Downregulated", "Upregulated"))
setEPS()
postscript("Red_plot.png")
p7 <- ggplot(aq_trim1, aes(x = GeneSet, y = reorder(GOSlimBP,FoldEnrichment),
size = FoldEnrichment, fill = pvalue)) +
geom_point(shape = 21) +
theme_bw() +
theme()
p7 <-  p7 + scale_fill_continuous(low = "red", high = "yellow")
p7 <- p7 +
#ggtitle("Lipid metabolic gene enrichment") +
labs(x = "GeneSet", y = "Biological Process") +
scale_size(range = c(1, 10)) +
theme(legend.position="right", legend.direction="vertical",
legend.box = "vertical",
legend.key.size = unit(0.3, "cm"))
p7
dev.off()
library(datasets)
library(ggplot2)
library(multcomp)
library(nlme)
library(XLConnect)
library(XLConnectJars)
library(lme4)
library(rJava)
library(xlsx)
library(readxl)
getwd()
#setwd("/Users/ivanferreira/Downloads/")
#dev.copy2pdf(file="GO_terms_allabove_3_refined.pdf")
aq_trim1 <- read.csv('BubblePlot_GOSlimBP_tidy.csv')
aq_trim1 <- aq_trim1[which(aq_trim1$GeneSet == "Downregulated" |
aq_trim1$GeneSet == "Upregulated"), ]
head(aq_trim1)
aq_trim1$GeneSet <- factor(aq_trim1$GeneSet, labels = c("Downregulated", "Upregulated"))
setEPS()
postscript("Red_plot.png")
p7 <- ggplot(aq_trim1, aes(x = GeneSet, y = reorder(GOSlimBP,FoldEnrichment),
size = FoldEnrichment, fill = pvalue)) +
geom_point(shape = 21) +
theme_bw() +
theme()
p7 <-  p7 + scale_fill_continuous(low = "red", high = "yellow")
p7 <- p7 +
#ggtitle("Lipid metabolic gene enrichment") +
labs(x = "GeneSet", y = "Biological Process") +
scale_size(range = c(1, 10)) +
theme(legend.position="right", legend.direction="vertical",
legend.box = "vertical",
legend.key.size = unit(0.3, "cm"))
p7
dev.off()
p7 <- ggplot(aq_trim1, aes(x = GeneSet, y = reorder(GOSlimBP,FoldEnrichment),
size = FoldEnrichment, fill = pvalue)) +
geom_point(shape = 21) +
theme_bw() +
theme()
#setwd("/Users/ivanferreira/Downloads/")
#dev.copy2pdf(file="GO_terms_allabove_3_refined.pdf")
aq_trim1 <- read.csv('BubblePlot_GOSlimBP_tidy.csv')
library(datasets)
library(ggplot2)
library(multcomp)
library(nlme)
library(XLConnect)
library(XLConnectJars)
library(lme4)
library(rJava)
library(xlsx)
library(readxl)
getwd()
#setwd("/Users/ivanferreira/Downloads/")
#dev.copy2pdf(file="GO_terms_allabove_3_refined.pdf")
aq_trim1 <- read.csv('BubblePlot_GOSlimBP_tidy.csv')
aq_trim1 <- aq_trim1[which(aq_trim1$GeneSet == "Downregulated" |
aq_trim1$GeneSet == "Upregulated"), ]
head(aq_trim1)
aq_trim1$GeneSet <- factor(aq_trim1$GeneSet, labels = c("Downregulated", "Upregulated"))
setEPS()
postscript("Red_plot.png")
p7 <- ggplot(aq_trim1, aes(x = GeneSet, y = reorder(GOSlimBP,FoldEnrichment),
size = FoldEnrichment, fill = pvalue)) +
geom_point(shape = 21) +
theme_bw() +
theme()
p7 <-  p7 + scale_fill_continuous(low = "red", high = "yellow")
p7 <- p7 +
#ggtitle("Lipid metabolic gene enrichment") +
labs(x = "GeneSet", y = "Biological Process") +
scale_size(range = c(1, 10)) +
theme(legend.position="right", legend.direction="vertical",
legend.box = "vertical",
legend.key.size = unit(0.3, "cm"))
p7
dev.off()
getwd()
# DESeq2 Analysis
# Update following input parameters and variables, then subsequent code blocks are soft-coded to read from these values
countdata <- read.table("HuR_vs_Ctrl_MO_RNASeq.txt", header=TRUE, row.names=1)
analysis_name <- 'Ctrl_vs_HuR_MO_UNpaired'
pop1_name <- 'Ctrl_MO'
pop1_reps <- 5
pop2_name <- 'HuRMO'
pop2_reps <- 5
# Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (first 2 are positive--second 2 are negative)
(condition <- factor(c(rep(pop1_name, pop1_reps), rep(pop2_name, pop2_reps))))
# Start DESeq2
library(DESeq2)
# Create DESeq2 Dataset
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
# Plot dispersions
png(paste(analysis_name, 'qc_dispersion.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
plotDispEsts(dds, main=paste(analysis_name, 'Dispersion Plot.png', sep = " ", collapse = NULL))
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(3, "Purples")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png(paste(analysis_name, 'qc_heatmap_samples.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Principal components analysis
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better: (From Megan Martik)
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Unpaired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png(paste(analysis_name, 'pca.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-200, 200), ylim=c(-200, 200))
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
# Change first column name to Gene id
names(resdata)[1] <- "Gene id"
head(resdata)
## Write results
write.csv(resdata, file=paste(analysis_name, 'DESeq2_results.csv', sep = "_", collapse = NULL))
# DESeq2 Analysis
# Update following input parameters and variables, then subsequent code blocks are soft-coded to read from these values
countdata <- read.table("HuR_vs_Ctrl_MO_RNASeq.txt", header=TRUE, row.names=1)
analysis_name <- 'Ctrl_vs_HuR_MO_UNpaired'
pop1_name <- 'Ctrl_MO'
pop1_reps <- 5
pop2_name <- 'HuRMO'
pop2_reps <- 5
# Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (first 2 are positive--second 2 are negative)
(condition <- factor(c(rep(pop1_name, pop1_reps), rep(pop2_name, pop2_reps))))
# Start DESeq2
library(DESeq2)
# Create DESeq2 Dataset
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
# Plot dispersions
png(paste(analysis_name, 'qc_dispersion.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
plotDispEsts(dds, main=paste(analysis_name, 'Dispersion Plot.png', sep = " ", collapse = NULL))
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(3, "Purples")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png(paste(analysis_name, 'qc_heatmap_samples.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Principal components analysis
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better: (From Megan Martik)
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Unpaired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png(paste(analysis_name, 'pca.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-200, 200), ylim=c(-200, 200))
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
# Change first column name to Gene id
names(resdata)[1] <- "Gene_ID"
head(resdata)
## Write results
write.csv(resdata, file=paste(analysis_name, 'DESeq2_results.csv', sep = "_", collapse = NULL))
# DESeq2 Analysis
# Update following input parameters and variables, then subsequent code blocks are soft-coded to read from these values
countdata <- read.table("HuR_vs_Ctrl_MO_RNASeq.txt", header=TRUE, row.names=1)
analysis_name <- 'Ctrl_vs_HuR_MO_UNpaired'
pop1_name <- 'Ctrl_MO'
pop1_reps <- 5
pop2_name <- 'HuRMO'
pop2_reps <- 5
# Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (first 2 are positive--second 2 are negative)
(condition <- factor(c(rep(pop1_name, pop1_reps), rep(pop2_name, pop2_reps))))
# Start DESeq2
library(DESeq2)
# Create DESeq2 Dataset
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
# Plot dispersions
png(paste(analysis_name, 'qc_dispersion.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
plotDispEsts(dds, main=paste(analysis_name, 'Dispersion Plot.png', sep = " ", collapse = NULL))
dev.off()
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Colors for plots below
## Ugly:
## (mycols <- 1:length(unique(condition)))
## Use RColorBrewer, better
library(RColorBrewer)
(mycols <- brewer.pal(3, "Purples")[1:length(unique(condition))])
# Sample distance heatmap
sampleDists <- as.matrix(dist(t(assay(rld))))
library(gplots)
png(paste(analysis_name, 'qc_heatmap_samples.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=mycols[condition], RowSideColors=mycols[condition],
margin=c(10, 10), main="Sample Distance Matrix")
dev.off()
# Principal components analysis
## Could do with built-in DESeq2 function:
## DESeq2::plotPCA(rld, intgroup="condition")
## I like mine better: (From Megan Martik)
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Unpaired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
png(paste(analysis_name, 'pca.png', sep = "_", collapse = NULL), 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-200, 200), ylim=c(-200, 200))
dev.off()
# Get differential expression results
res <- results(dds)
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
# Change first column name to Gene id
names(resdata)[1] <- "Gene_ID"
head(resdata)
## Write results
write.csv(resdata, file=paste(analysis_name, 'DESeq2_results.csv', sep = "_", collapse = NULL))
setwd("~/OneDrive - Johns Hopkins/Data/SMPD3_Txnl_Regulation/Sox9KD_SMPD3Enh3")
data <- read.csv("raw_source_data/20221115_Sox9MO05mM_BF;Sox10;H2BRFP;
Enh3GFP;Pax7_emb1_6ss_10x_stack.csv", header=TRUE, row.names=1)
data <- read.csv("raw_source_data/20221115_Sox9MO05mM_BF;Sox10;H2BRFP;Enh3GFP;Pax7_emb1_6ss_10x_stack.csv",
header=TRUE, row.names=1)
View(data)
file_list <- list.files(path = 'raw_source_data/')
file_list
for (file_ in file_list) {
print(file_)
}
data_path = 'raw_source_data/'
file_list = list.files(path = 'raw_source_data/')
data_path = 'raw_source_data/'
file_list = list.files(path = 'raw_source_data/')
temp_data = read.csv("raw_source_data/20221115_Sox9MO05mM_BF;Sox10;H2BRFP;Enh3GFP;Pax7_emb1_6ss_10x_stack.csv",
header=TRUE, row.names=1)
